import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as e,c as p,b as s,d as n,a as i,e as o}from"./app-DXKPJHsU.js";const t={},k=o(`<p>给出2种低时间复杂度快速筛选质数的方法</p><h2 id="埃氏筛" tabindex="-1"><a class="header-anchor" href="#埃氏筛"><span>埃氏筛</span></a></h2><p>埃氏筛，即 埃拉托斯特尼筛法，时间复杂度为 <strong>O(nlog(logn))</strong>，算法详情可参见wiki百科：<a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95">埃拉托斯特尼筛法</a></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> AceSifter</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">     * 返回 &lt;= n 的所有质数</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">     *</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">     * @param n 上界</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> List</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Integer</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> aceSifter</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;"> n</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // 质数表</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        List</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Integer</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="color:#24292E;--shiki-dark:#E06C75;">primes</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> ArrayList</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // flag[i] = true: i为质数</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        boolean</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#24292E;--shiki-dark:#E06C75;">flag</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> boolean</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[n </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        Arrays</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">fill</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(flag, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">true</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // 0、1 不是质数</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        flag[</span><span style="color:#005CC5;--shiki-dark:#D19A66;">0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> flag[</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // 将合数置为false</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">; i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> n; i</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (flag[i]) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">                // 注: j &gt;= 0作用: 避免溢出</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">                for</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> j</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> i; j </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> j </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> n; j </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> i) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">                    // 此处可加 if (flag[i]) 判断, 也可不加</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">                    flag[j] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">                primes</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">add</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> primes;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        List</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Integer</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="color:#24292E;--shiki-dark:#E06C75;">primes</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> aceSifter</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">110</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(primes);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="欧拉筛-线性筛" tabindex="-1"><a class="header-anchor" href="#欧拉筛-线性筛"><span>欧拉筛/线性筛</span></a></h2><p>欧拉筛，又名线性筛，时间复杂度为 <strong>O(n)</strong>，算法详情可参考: <a href="https://www.bilibili.com/video/BV1H8411E7hn/?spm_id_from=333.999.0.0&amp;vd_source=e9988d180a03a7b167558e2688c4362b">欧拉筛</a><br></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> EulerSifter</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">     * 返回 &lt;= n 的所有质数&lt;br/&gt;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">     * </span><span style="color:#D73A49;--shiki-dark:#C678DD;font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;"> n</span><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;"> 上界</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> List</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Integer</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> eulerSifter</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;"> n</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // 质数表</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        List</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Integer</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="color:#24292E;--shiki-dark:#E06C75;">primes</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> ArrayList</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // flag[i] = true: i为质数</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        boolean</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#24292E;--shiki-dark:#E06C75;">flag</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> boolean</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[n </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        Arrays</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">fill</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(flag, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">true</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // 0、1 不是质数</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        flag[</span><span style="color:#005CC5;--shiki-dark:#D19A66;">0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> flag[</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // 2 是质数</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        flag[</span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">; i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> n; i</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">            // 若i是「质数」，添加至质数表</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (flag[i]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">                primes</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">add</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">            // l是i的最小质因数，将 &lt;=l(i的最小质因数)的质数与i相乘，并标记为false</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">            for</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> l</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> :</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> primes) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">                if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> l </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> n) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">                    break</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">                flag[i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> l] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">                if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">%</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> l </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">                    break</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> primes;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        List</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">Integer</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="color:#24292E;--shiki-dark:#E06C75;">primes</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> eulerSifter</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#005CC5;--shiki-dark:#D19A66;">110</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(primes);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span>参考文献</span></a></h2>`,8),c={href:"https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.bilibili.com/video/BV1H8411E7hn/?spm_id_from=333.999.0.0&vd_source=e9988d180a03a7b167558e2688c4362b",target:"_blank",rel:"noopener noreferrer"};function B(h,y){const a=r("ExternalLinkIcon");return e(),p("div",null,[k,s("ol",null,[s("li",null,[s("a",c,[n("https://zh.wikipedia.org/wiki/埃拉托斯特尼筛法"),i(a)])]),s("li",null,[s("a",d,[n("https://www.bilibili.com/video/BV1H8411E7hn/?spm_id_from=333.999.0.0&vd_source=e9988d180a03a7b167558e2688c4362b"),i(a)])])])])}const D=l(t,[["render",B],["__file","质数筛.html.vue"]]),v=JSON.parse('{"path":"/algorithm/%E8%B4%A8%E6%95%B0%E7%AD%9B.html","title":"质数筛","lang":"zh-CN","frontmatter":{"title":"质数筛","category":["algorithm"],"tag":["质数筛"],"article":true,"date":"2024-01-31T00:00:00.000Z","description":"给出2种低时间复杂度快速筛选质数的方法","head":[["meta",{"property":"og:url","content":"https://raysunwhut.github.io/algorithm/%E8%B4%A8%E6%95%B0%E7%AD%9B.html"}],["meta",{"property":"og:site_name","content":"浪客剑心"}],["meta",{"property":"og:title","content":"质数筛"}],["meta",{"property":"og:description","content":"给出2种低时间复杂度快速筛选质数的方法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-02T12:00:35.000Z"}],["meta",{"property":"article:tag","content":"质数筛"}],["meta",{"property":"article:published_time","content":"2024-01-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-02T12:00:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"质数筛\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-02T12:00:35.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"埃氏筛","slug":"埃氏筛","link":"#埃氏筛","children":[]},{"level":2,"title":"欧拉筛/线性筛","slug":"欧拉筛-线性筛","link":"#欧拉筛-线性筛","children":[]},{"level":2,"title":"参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1714655754000,"updatedTime":1717329635000,"contributors":[{"name":"RaySunWHUT","email":"42628912+RaySunWHUT@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":1.61,"words":483},"filePathRelative":"algorithm/质数筛.md","localizedDate":"2024年1月31日","excerpt":"<p>给出2种低时间复杂度快速筛选质数的方法</p>\\n","autoDesc":true}');export{D as comp,v as data};
