import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as s,c as a,b as e,d as o,a as i,e as l}from"./app-DXKPJHsU.js";const p="/assets/image-sYXmvPB3.png",c="/assets/image-1-B3E7zIiq.png",g="/assets/image-2-CWPbPwzK.png",d="/assets/image-3-D1Ddm76u.png",h={},m=l('<p>描述零拷贝的底层原理</p><h2 id="一、问题背景" tabindex="-1"><a class="header-anchor" href="#一、问题背景"><span>一、问题背景</span></a></h2><p>如何在磁盘IO成为性能瓶颈时，优化文件传输性能 ?</p><h2 id="二、传统文件传输" tabindex="-1"><a class="header-anchor" href="#二、传统文件传输"><span>二、传统文件传输</span></a></h2><h3 id="_2-1、传统文件传输的问题" tabindex="-1"><a class="header-anchor" href="#_2-1、传统文件传输的问题"><span>2.1、传统文件传输的问题</span></a></h3><p>早期的IO操作(传统文件传输)，内存与磁盘的数据传输都是由CPU来完成的，而此时CPU不能执行其他任务，会特别浪费CPU。</p><p><strong>服务端</strong> → <strong>客户端 文件传输</strong></p><ol><li>4次「<strong>用户态</strong>」与「<strong>内核态</strong>」的上下文切换</li><li>4次数据拷贝(2次DMA + 2次CPU拷贝)<br><img src="'+p+'" alt="alt text"></li></ol><h3 id="_2-2、可优化点" tabindex="-1"><a class="header-anchor" href="#_2-2、可优化点"><span>2.2、可优化点</span></a></h3><ol><li>减少「<strong>用户态与内核态的上下文切换</strong>」，即减少 <strong>系统调用</strong> 次数</li><li>减少「<strong>内存拷贝</strong>」次数，<strong>用户缓冲区</strong> 在整个过程中是没有不必要存在的</li></ol><h2 id="三、零拷贝" tabindex="-1"><a class="header-anchor" href="#三、零拷贝"><span>三、零拷贝</span></a></h2><p>零拷贝-实现方式：</p><ol><li>mmap + write</li><li>sendfile</li><li>SG-DMA + sendfile</li></ol><h3 id="_3-1、mmap-write" tabindex="-1"><a class="header-anchor" href="#_3-1、mmap-write"><span>3.1、<strong>mmap + write</strong></span></a></h3><p>mmap系统调用会直接把内核缓冲区中的数据 <strong>映射</strong> 到 <strong>用户空间</strong>，这样 操作系统内核 和 <strong>用户空间</strong> 就不需要再进行任何的 <strong>数据拷贝</strong> 操作。</p><p>mmap替换read，可减少1次数据拷贝过程。</p><p>共需 <strong>4次上下文切换 + 3次数据拷贝(2次DMA + 1次CPU拷贝)</strong>。</p><figure><img src="'+c+'" alt="alt text" tabindex="0"><figcaption>alt text</figcaption></figure><h3 id="_3-2、sendfile" tabindex="-1"><a class="header-anchor" href="#_3-2、sendfile"><span>3.2、sendfile</span></a></h3><p>使用 <strong>sendfile</strong> 替代 read 和 write 两个系统调用，合并磁盘读取 + 网络发送两个操作，该系统调用可以直接把 <strong>内核缓冲区</strong> 中的数据拷贝至 <strong>Socket缓冲区</strong>，而无需拷贝至 <strong>用户空间</strong>。</p><p>sendfile 替换 read &amp; write，可减少 2次上下文切换 以及 1次数据拷贝。</p><p>共需 <strong>2次上下文切换 + 3次数据拷贝(2次DMA拷贝 + 1次CPU拷贝)</strong>。<br><img src="'+g+'" alt="alt text"></p><p>然而以上均不是真正的零拷贝技术。</p><h3 id="_3-3、真正的零拷贝" tabindex="-1"><a class="header-anchor" href="#_3-3、真正的零拷贝"><span>3.3、真正的零拷贝</span></a></h3><p>网卡支持 <strong>SG-DMA技术</strong>，可进一步减少通过CPU将 <strong>内核缓冲区</strong> 中的数据拷贝至 <strong>Socket缓冲区</strong> 的过程。</p><p>共需要 2次上下文切换 + 2次数据拷贝(<strong>2次DMA拷贝</strong>)<br><img src="'+d+'" alt="alt text"></p><p><strong>SG-DMA + sendfile</strong> 只需 <strong>2次数据拷贝</strong>，全程没有通过CPU来搬运数据，所有数据都是通过DMA传输。</p><p><strong>注意</strong>：零拷贝技术不允许进程对文件内容做进一步加工。</p><h2 id="四、零拷贝应用" tabindex="-1"><a class="header-anchor" href="#四、零拷贝应用"><span>四、零拷贝应用</span></a></h2><ol><li>消息队列中间件 Kafka</li><li>负载均衡中间件 Nginx</li></ol><h2 id="五、参考文献" tabindex="-1"><a class="header-anchor" href="#五、参考文献"><span>五、参考文献</span></a></h2>',31),_={href:"https://xiaolincoding.com/os/8_network_system/zero_copy.html#_9-1-%E4%BB%80%E4%B9%88%E6%98%AF%E9%9B%B6%E6%8B%B7%E8%B4%9D",target:"_blank",rel:"noopener noreferrer"};function B(f,u){const t=r("ExternalLinkIcon");return s(),a("div",null,[m,e("ol",null,[e("li",null,[e("a",_,[o("https://xiaolincoding.com/os/8_network_system/zero_copy.html#_9-1-什么是零拷贝"),i(t)])])])])}const b=n(h,[["render",B],["__file","零拷贝.html.vue"]]),y=JSON.parse('{"path":"/components/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%9B%B6%E6%8B%B7%E8%B4%9D/%E9%9B%B6%E6%8B%B7%E8%B4%9D.html","title":"零拷贝","lang":"zh-CN","frontmatter":{"title":"零拷贝","index":true,"category":["中间件"],"tag":["os"],"date":"2024-03-12T00:00:00.000Z","star":false,"description":"描述零拷贝的底层原理","head":[["meta",{"property":"og:url","content":"https://raysunwhut.github.io/components/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E9%9B%B6%E6%8B%B7%E8%B4%9D/%E9%9B%B6%E6%8B%B7%E8%B4%9D.html"}],["meta",{"property":"og:site_name","content":"浪客剑心"}],["meta",{"property":"og:title","content":"零拷贝"}],["meta",{"property":"og:description","content":"描述零拷贝的底层原理"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-11T07:59:22.000Z"}],["meta",{"property":"article:tag","content":"os"}],["meta",{"property":"article:published_time","content":"2024-03-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-11T07:59:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"零拷贝\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-11T07:59:22.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、问题背景","slug":"一、问题背景","link":"#一、问题背景","children":[]},{"level":2,"title":"二、传统文件传输","slug":"二、传统文件传输","link":"#二、传统文件传输","children":[{"level":3,"title":"2.1、传统文件传输的问题","slug":"_2-1、传统文件传输的问题","link":"#_2-1、传统文件传输的问题","children":[]},{"level":3,"title":"2.2、可优化点","slug":"_2-2、可优化点","link":"#_2-2、可优化点","children":[]}]},{"level":2,"title":"三、零拷贝","slug":"三、零拷贝","link":"#三、零拷贝","children":[{"level":3,"title":"3.1、mmap + write","slug":"_3-1、mmap-write","link":"#_3-1、mmap-write","children":[]},{"level":3,"title":"3.2、sendfile","slug":"_3-2、sendfile","link":"#_3-2、sendfile","children":[]},{"level":3,"title":"3.3、真正的零拷贝","slug":"_3-3、真正的零拷贝","link":"#_3-3、真正的零拷贝","children":[]}]},{"level":2,"title":"四、零拷贝应用","slug":"四、零拷贝应用","link":"#四、零拷贝应用","children":[]},{"level":2,"title":"五、参考文献","slug":"五、参考文献","link":"#五、参考文献","children":[]}],"git":{"createdTime":1718092762000,"updatedTime":1718092762000,"contributors":[{"name":"RaySunWHUT","email":"42628912+RaySunWHUT@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.33,"words":998},"filePathRelative":"components/操作系统/零拷贝/零拷贝.md","localizedDate":"2024年3月12日","excerpt":"<p>描述零拷贝的底层原理</p>\\n","autoDesc":true}');export{b as comp,y as data};
