import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as p,c as t,a as n,w as k,d as a,b as s,e as i}from"./app-DXKPJHsU.js";const c={},d=i('<p>描述洗牌算法和随机抽样算法的底层原理和实现</p><h2 id="一、knuth洗牌算法-fisher-yates-shuffle" tabindex="-1"><a class="header-anchor" href="#一、knuth洗牌算法-fisher-yates-shuffle"><span>一、Knuth洗牌算法(Fisher-Yates Shuffle)</span></a></h2><p><strong>算法目标</strong>：将1个 数组 或 列表 <strong>随机打乱</strong>，以等可能概率生成 数组 或 列表 的1个 <strong>随机排列</strong>。<br><strong>算法流程</strong>：</p><ol><li>对于1个含n个无重复元素的 数组 或 列表，对于 <strong>[0, n -1]</strong> 范围内的每个 <strong>下标为i</strong> 的元素，从下标范围 <strong>[i, n-1]</strong> 中，随机选出1个 <strong>下标为k</strong> 的元素，与 <strong>下标为i</strong> 的元素交换。</li><li>遍历 数组 或 列表，对 数组 或 列表 中的每个元素执行 <strong>步骤1</strong>。</li><li>数组遍历完成，即完成 “<strong>洗牌</strong>”。</li></ol><p>算法 <strong>正确性证明</strong>：</p><ol><li>首先，根据排列组合，对于1个含n个无重复元素的 数组 或 列表，其总排列数为<strong>n</strong> x (<strong>n - 1</strong>) x (<strong>n - 2</strong>) x … x 1 = <strong>n!</strong>，而算法目标就是从这 <strong>n!</strong> 种排列组合中，随机选出1个排列。</li><li>根据Knuth算法流程， <ol><li>对于下标0，则选择范围是 <strong>[0, n-1]</strong>，故有n种随机选法</li><li>对于下标1，则选择范围是 <strong>[1 , n-1]</strong>，有n-1种随机选法</li><li>…</li><li>对于下标n-1，则选择范围是 <strong>[n-1, n-1]</strong>，有1种随机选法</li></ol></li><li>因此，Knuth洗牌算法可以从 <strong>n!</strong> 种选择(排列)中，随机选出1种排列，达成了算法目标。</li></ol>',6),h=s("strong",null,"Knuth洗牌算法",-1),B=s("strong",null,"含重复元素",-1),y=s("strong",null,"LC题源",-1),E={href:"https://leetcode.cn/problems/shuffle-an-array/description/",target:"_blank",rel:"noopener noreferrer"},A=s("strong",null,"LC384-打乱数组",-1),D=s("br",null,null,-1),C=s("strong",null,"算法实现",-1),F=i(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> Solution</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="color:#24292E;--shiki-dark:#E06C75;">[] nums</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Solution</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">nums</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#E5C07B;">        this</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">nums</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> nums;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="color:#24292E;--shiki-dark:#61AFEF;">[] </span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">reset</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> nums;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="color:#24292E;--shiki-dark:#61AFEF;">[] </span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">shuffle</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        Random</span><span style="color:#24292E;--shiki-dark:#E06C75;"> rand</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Random</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // 深拷贝</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        int</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#24292E;--shiki-dark:#E06C75;">ans</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> nums</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">clone</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // 对于下标i, 从 下标范围[i, n-1] 中，随机选出1个元素与nums[i]交换</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // 故，会随机产生 n x (n-1) x (n-2)x...x1 = n!种组合</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">; i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> ans</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">length</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">; i</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">            int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> k</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> rand</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">nextInt</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#24292E;--shiki-dark:#E5C07B;">ans</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">length</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> i);</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">            swap</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(ans, i, k);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> ans;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> swap</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">arr</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;"> i</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;"> j</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> temp</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> arr[i];</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        arr[i] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> arr[j];</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        arr[j] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> temp;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、蓄水池抽样-reservoir-sampling-算法" tabindex="-1"><a class="header-anchor" href="#二、蓄水池抽样-reservoir-sampling-算法"><span>二、蓄水池抽样(Reservoir Sampling)算法</span></a></h2><p><strong>算法目标</strong>：从未知容量大小(N ≥ k)的样本集中，以等概率选出k个样本。</p><p><strong>算法流程</strong>：</p><ol><li>将样本集的 <strong>前k个样本</strong>(下标范围为**[0, k-1]**的元素) 放到 ”<strong>蓄水池</strong>” 中。</li><li>从 <strong>第 i 个元素(i &gt; k-1)</strong> 开始，每次随机生成1个范围在 [<strong>0, i</strong>] 间的 <strong>随机数 j</strong><ol><li>若 <strong>j ≤ k-1</strong>，则将 <strong>下标为i</strong> 的元素 与 <strong>下标为j</strong> 的元素 <strong>交换</strong>。</li><li>若 <strong>j &gt; k-1</strong>，不执行操作。</li></ol></li></ol><p>算法<strong>正确性证明</strong>：<br> 对于 第i个元素(i &gt; k - 1)，它被选入蓄水池的概率是 <strong>k/i</strong>；对于已在蓄水池中的元素，它被选中的概率同样是<strong>k/i</strong>；<br> 故当遍历至 <strong>第N-1个</strong> 元素时，选中样本集中各个元素的概率均为 <strong>k/N</strong>，达成了算法目标。</p>`,6),v=s("strong",null,"O(N)",-1),u=s("br",null,null,-1),m=s("strong",null,"LC题源",-1),g={href:"https://leetcode.cn/problems/linked-list-random-node/description/",target:"_blank",rel:"noopener noreferrer"},b=s("br",null,null,-1),f=s("strong",null,"算法实现",-1),_=i(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">import</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> java.util.Random</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> ReservoirSampling</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">    // 从数据流中随机抽取k个样本</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="color:#24292E;--shiki-dark:#61AFEF;">[] </span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">reservoirSample</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">stream</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;"> k</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        int</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#24292E;--shiki-dark:#E06C75;">reservoir</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[k];</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        Random</span><span style="color:#24292E;--shiki-dark:#E06C75;"> random</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> Random</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // 将前k个元素放入蓄水池</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">; i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> k; i</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">            reservoir[i] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> stream[i];</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">        // 处理剩余的元素</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> i</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> k; i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> stream</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">length</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">; i</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">++</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">            // 生成一个范围在[0, i]之间的随机数</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">            // 每个元素(未在蓄水池 &amp; 已在蓄水池中的元素)被选中的概率都是 k/i(i分之k)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">            int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> j</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#E5C07B;"> random</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">nextInt</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(i </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">						</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">            // 如果随机数j落在蓄水池的范围内，则替换蓄水池中的第j个元素</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">            if</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (j </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> k) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">                reservoir[j] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> stream[i];</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> reservoir;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">		</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E06C75;">		</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        int</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#24292E;--shiki-dark:#E06C75;">stream</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">4</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">5</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">6</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">7</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">8</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">9</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">10</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> k</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        int</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#24292E;--shiki-dark:#E06C75;">result</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> reservoirSample</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(stream, k);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;Sampled elements:&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">        for</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="color:#D73A49;--shiki-dark:#C678DD;">int</span><span style="color:#24292E;--shiki-dark:#E06C75;"> value</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> :</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> result) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">            System</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#24292E;--shiki-dark:#E5C07B;">out</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">print</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(value </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="color:#032F62;--shiki-dark:#98C379;"> &quot; &quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function x(j,S){const o=r("font"),l=r("ExternalLinkIcon");return p(),t("div",null,[d,n(o,{color:"red"},{default:k(()=>[a("注")]),_:1}),a("："),h,a("，对于 "),B,a(" 的数组/列表同样适用，上文中以“n个无重复元素”表述，主要是为了论证 Knuth洗牌算法 的正确性 & 有效性。"),s("p",null,[y,a("："),s("a",E,[A,n(l)]),D,C,a("(java)：")]),F,s("p",null,[a("算法时间复杂度："),v,u,m,a("："),s("a",g,[a("LC382-链表随机结点"),n(l)]),b,f,a("(java)：")]),_])}const R=e(c,[["render",x],["__file","洗牌 _ 蓄水池抽样算法.html.vue"]]),w=JSON.parse('{"path":"/algorithm/%E6%8A%BD%E6%A0%B7%E7%AE%97%E6%B3%95/%E6%B4%97%E7%89%8C%20_%20%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7%E7%AE%97%E6%B3%95.html","title":"洗牌算法 & 蓄水池抽样算法","lang":"zh-CN","frontmatter":{"title":"洗牌算法 & 蓄水池抽样算法","category":["algorithm"],"tag":["抽样","随机排列"],"star":true,"article":true,"date":"2024-01-25T00:00:00.000Z","description":"描述洗牌算法和随机抽样算法的底层原理和实现","head":[["meta",{"property":"og:url","content":"https://raysunwhut.github.io/algorithm/%E6%8A%BD%E6%A0%B7%E7%AE%97%E6%B3%95/%E6%B4%97%E7%89%8C%20_%20%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"浪客剑心"}],["meta",{"property":"og:title","content":"洗牌算法 & 蓄水池抽样算法"}],["meta",{"property":"og:description","content":"描述洗牌算法和随机抽样算法的底层原理和实现"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-02T12:04:52.000Z"}],["meta",{"property":"article:tag","content":"抽样"}],["meta",{"property":"article:tag","content":"随机排列"}],["meta",{"property":"article:published_time","content":"2024-01-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-02T12:04:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"洗牌算法 & 蓄水池抽样算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-02T12:04:52.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、Knuth洗牌算法(Fisher-Yates Shuffle)","slug":"一、knuth洗牌算法-fisher-yates-shuffle","link":"#一、knuth洗牌算法-fisher-yates-shuffle","children":[]},{"level":2,"title":"二、蓄水池抽样(Reservoir Sampling)算法","slug":"二、蓄水池抽样-reservoir-sampling-算法","link":"#二、蓄水池抽样-reservoir-sampling-算法","children":[]}],"git":{"createdTime":1717329635000,"updatedTime":1717329892000,"contributors":[{"name":"RaySunWHUT","email":"42628912+RaySunWHUT@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":3.52,"words":1055},"filePathRelative":"algorithm/抽样算法/洗牌 & 蓄水池抽样算法.md","localizedDate":"2024年1月25日","excerpt":"<p>描述洗牌算法和随机抽样算法的底层原理和实现</p>\\n","autoDesc":true}');export{R as comp,w as data};
