import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as a,c,b as t,d as e,a as o,w as g,e as s}from"./app-DXKPJHsU.js";const p="/assets/SQL%E4%BC%98%E5%8C%96%E5%8E%9F%E5%88%99-BXDX31UX.png",d={},h=s('<h2 id="零、sql优化-思维导图" tabindex="-1"><a class="header-anchor" href="#零、sql优化-思维导图"><span>零、SQL优化-思维导图</span></a></h2><figure><img src="'+p+'" alt="" tabindex="0"><figcaption></figcaption></figure><h2 id="一、sql优化原则" tabindex="-1"><a class="header-anchor" href="#一、sql优化原则"><span>一、SQL优化原则</span></a></h2>',3),m=t("strong",null,"计算逻辑/数据操作",-1),u=t("br",null,null,-1),y=t("h2",{id:"二、常见sql优化方法",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二、常见sql优化方法"},[t("span",null,"二、常见SQL优化方法")])],-1),_=s(`<li>优化业务逻辑，减少查询范围<br> e.g. <ol><li>IN关键字后的元素个数不要太多</li><li>范围查询 → 单次查询，转化为for训练批量请求</li><li>DML尽量短小(Between … AND …)</li></ol></li><li>只返回必要字段(使用<strong>覆盖索引</strong>)，避免出现 **select ***</li><li>优先考虑在 <strong>where</strong> &amp; <strong>order by</strong> 涉及的列建立索引<br> 应减少使用 <strong>order by</strong>：否则，若 <strong>索引不合适</strong> &amp; <strong>符合条件记录较多</strong> 时，排序会消耗大量CPU、IO等资源，易引发性能问题</li><li>避免在索引列上做 <strong>运算(&gt;、+、- 、=)</strong> 或 使用 <strong>SQL函数操作(SUM、MAX)</strong>，<strong>应使用java/python/Go程序实现SQL函数逻辑</strong></li><li>避免使用 <strong>like</strong></li><li>避免使用 <strong>join</strong></li><li>优先用 JOIN 代替 IN 子查询</li><li><strong>update/delete</strong> 尽量根据 <strong>主键/唯一键</strong> 操作</li><li>避免 <strong>隐式转换(类似于Java造型)</strong><br> 隐式转换会造成索引失效，常见情况: <strong>int</strong> 与 <strong>string</strong> 比较时发生；<strong>字符串不加单引号</strong> 会 隐式转换。<br> SQL数量类型 <strong>优先级由高到低</strong><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki shiki-themes github-light one-dark-pro" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">Datetime</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> &gt;</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> Float</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> &gt;</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> Int</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> &gt;</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> Text</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> &gt;</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> Varchar</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> &gt;</span><span style="color:#D73A49;--shiki-dark:#C678DD;"> Binary</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>少用 <strong>or(注: 使用OR的时候SQL可能仍然会走OR前后的所有索引)</strong></li>`,10),k=t("strong",null,"limit分页",-1),b={href:"https://raysunwhut.github.io/system%20design/%E5%88%86%E9%A1%B5%E9%97%AE%E9%A2%98/%E6%B7%B1%E5%88%86%E9%A1%B5.html",target:"_blank",rel:"noopener noreferrer"},E=s("<li>使用 <strong>!=</strong> 或 <strong>&lt;&gt;</strong> 会导致全表扫描</li><li>使用 <strong>group by</strong> 时，若无排序需求，建议加 <strong>ORDER BY NULL</strong></li><li>性能非常紧张时，最好不使用 <strong>group by、distinct、order by</strong> 等关键字，<strong>使用java/python/Go程序实现数据操作逻辑</strong></li><li>当已在where条件中正确使用索引 &amp; 操作的数据量非常大时，使用 <strong>GROUP BY/distinct/ORDER BY</strong> 等仍然会产生额外的数据IO时间开销，导致数据库在处理大量数据时增加额外的计算成本，即使GROUP BY等操作在索引列上使用也不例外。故在性能非常紧张时，不要使用 <strong>GROUP BY/distinct/ORDER BY</strong> 等关键字，而是使用java/python/Go程序实现数据操作逻辑。</li>",4);function D(B,S){const r=n("font"),l=n("ExternalLinkIcon");return a(),c("div",null,[h,t("p",null,[e("核心优化原则/目标只有1条，"),t("strong",null,[o(r,{color:"red"},{default:g(()=>[e("那就是尽可能简单的使用SQL语句，让MySQL存储引擎的计算/数据操作(e.g. SUM，MAX or group by/order by)尽可能少")]),_:1})]),e("，尤其是在对性能要求非常苛刻的情况下，最好将 "),m,e(" 交给java/python/Go等程序语言来实现。"),u,e(" SQL优化的本质是减少机器的 IO 和 CPU 的资源消耗。")]),y,t("ol",null,[_,t("li",null,[e("不要使用大偏移量的"),k,e("(如果业务逻辑需要支持大偏移量的limit分页，参见"),t("a",b,[e("深分页问题"),o(l)]),e(")")]),E])])}const Q=i(d,[["render",D],["__file","SQL调优.html.vue"]]),C=JSON.parse('{"path":"/components/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E4%BC%98%E5%8C%96/SQL%E8%B0%83%E4%BC%98.html","title":"SQL调优","lang":"zh-CN","frontmatter":{"title":"SQL调优","index":true,"category":["db"],"tag":["sql调优"],"date":"2024-05-18T00:00:00.000Z","article":true,"star":false,"head":[["meta",{"property":"og:url","content":"https://raysunwhut.github.io/components/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E4%BC%98%E5%8C%96/SQL%E8%B0%83%E4%BC%98.html"}],["meta",{"property":"og:site_name","content":"浪客剑心"}],["meta",{"property":"og:title","content":"SQL调优"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-11T14:28:28.000Z"}],["meta",{"property":"article:tag","content":"sql调优"}],["meta",{"property":"article:published_time","content":"2024-05-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-11T14:28:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SQL调优\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-11T14:28:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"零、SQL优化-思维导图","slug":"零、sql优化-思维导图","link":"#零、sql优化-思维导图","children":[]},{"level":2,"title":"一、SQL优化原则","slug":"一、sql优化原则","link":"#一、sql优化原则","children":[]},{"level":2,"title":"二、常见SQL优化方法","slug":"二、常见sql优化方法","link":"#二、常见sql优化方法","children":[]}],"git":{"createdTime":1718183575000,"updatedTime":1728656908000,"contributors":[{"name":"RaySunWHUT","email":"42628912+RaySunWHUT@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":2.4,"words":719},"filePathRelative":"components/数据库/SQL优化/SQL调优.md","localizedDate":"2024年5月18日","excerpt":""}');export{Q as comp,C as data};
